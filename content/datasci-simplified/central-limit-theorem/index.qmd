---
title: "Demystifying the Central Limit Theorem"
subtitle: "Marbles to the Rescue: Making the Abstract Tangible"
format: 
  revealjs:
    slide-number: true
    chalkboard: true
    smaller: true
    scrollable: true
editor: source
---

## Premise

Imagine that you have a bag filled with [red]{style="color: red"} and [blue]{style="color: blue"} marbles.

How would you guess the proportion of [red]{style="color: red"} ones without going through every marble?

## Simulating Marble Population

```{r}
#| echo: true

library(tidyverse)

source("../utils.R")   # helper functions

red_marble = "ðŸ”´"
blue_marble = "ðŸ”µ"

# pretend you don't know this number
prob_red = 0.64
num_marbles = 1000

set.seed(42) # reproducibility
marbles = sample(c(red_marble, blue_marble), 
                 size = num_marbles, 
                 replace = TRUE, 
                 prob = c(prob_red, 1 - prob_red))
```

. . .

```{r}
#| echo: true
cat(marbles[1:10])
```

## Taking One Sample

```{r}
#| echo: true
one_sample = get_samples(marbles, sample_size = 10, number_of_samples = 1, func = is_red)

kable(one_sample, "html") |>
  kable_styling(font_size = 20)
```

. . .

```{r}
#| echo: true
sample_proportion = mean(one_sample$sample_value)
print(str_glue("Percentage of red marbles: {sample_proportion * 100}%"))
```

## Taking More Samples

```{r}
#| echo: false
trials = list()
```

```{r}
#| echo: true

samples = get_samples(marbles, sample_size = 10, number_of_samples = 100, func = is_red)

sample_proportions = samples |>
  group_by(sample_number) |>
  summarise(proportion = mean(sample_value))

kable(head(sample_proportions, 5)) 

```

. . .

```{r}
#| echo: true
standard_errors = tibble(sample_size = 10, standard_error = sd(sample_proportions$proportion))
kable(standard_errors)
```

```{r}
#| echo: false
trials[[1]] = samples
```

## Taking Samples Repeatedly

```{r}
#| echo: true
plot_samples_and_averages(samples, prob_red)
```

## Increasing Sample Size to 20

```{r}
#| echo: true

samples = get_samples(marbles, sample_size = 20, number_of_samples = 100, func = is_red)

sample_proportions = samples |>
  group_by(sample_number) |>
  summarise(proportion = mean(sample_value))

standard_errors = standard_errors |>
  add_row(sample_size = 20, 
          standard_error = sd(sample_proportions$proportion))

kable(standard_errors)
```

```{r}
#| echo: false
trials[[2]] = samples
```

## Increasing Sample Size to 20

```{r}
#| echo: true
plot_samples_and_averages(samples, prob_red)
```

## Increasing Sample Size to 50

```{r}
#| echo: true

samples = get_samples(marbles, sample_size = 50, number_of_samples = 100, func = is_red)

sample_proportions = samples |>
  group_by(sample_number) |>
  summarise(proportion = mean(sample_value))

standard_errors = standard_errors |>
  add_row(sample_size = 50, 
          standard_error = sd(sample_proportions$proportion))

kable(standard_errors, "html")
```

```{r}
#| echo: false
trials[[3]] = samples
```

## Increasing Sample Size to 50

```{r}
#| echo: true
plot_samples_and_averages(samples, prob_red)
```

## Increasing Sample Size to 100

```{r}
#| echo: true

samples = get_samples(marbles, sample_size = 100, number_of_samples = 100, func = is_red)

sample_proportions = samples |>
  group_by(sample_number) |>
  summarise(proportion = mean(sample_value))

standard_errors = standard_errors |>
  add_row(sample_size = 100, 
          standard_error = sd(sample_proportions$proportion))

kable(standard_errors, "html")
```

```{r}
#| echo: false
trials[[4]] = samples
```

## Increasing Sample Size to 100

```{r}
#| echo: true
plot_samples_and_averages(samples, prob_red)
```

## Unravel the Magic - CLT

As the sample size increases, typically when n > 30, 
the distribution of the sample means approaches a normal distribution.

## Real-world Data

```{r}
#| echo: true
set.seed(42)

n = 1000
mean_log = log(30000)
sd_log = 1 
salaries = rlnorm(n, meanlog = mean_log, sdlog = sd_log)

ggplot(data.frame(salaries), aes(x = salaries)) + 
  geom_histogram(bins = 50, fill = "blue", color = "black") + 
  geom_vline(xintercept = mean(salaries), color = "red", linewidth = 1) +
  geom_text(aes(x = mean(salaries) * 2, y = 400, label = str_glue("{round(mean(salaries), 2)}")), 
            color = "red", size = 3) +
  labs(title = "Salary Distribution", x = "Salary", y = "Count") + 
  theme_minimal()

```

## Real-world Data

```{r}
#| echo: true
samples = get_samples(salaries, sample_size = 100, number_of_samples = 100)
plot_samples_and_averages(samples, mean(salaries))
```



## Key Insights


```{r}
#| echo: false
sm1 = plot_sample_means(trials[[1]], prob_red)
sm2 = plot_sample_means(trials[[2]], prob_red)
sm3 = plot_sample_means(trials[[3]], prob_red)
sm4 = plot_sample_means(trials[[4]], prob_red)
grid.arrange(sm1, sm2, sm3, sm4, ncol = 4)
```

-   Sample means cluster around the population mean
-   Larger sample sizes decrease variability
-   Distribution of sample means becomes more normal as size increases
-   Works for any population distribution


